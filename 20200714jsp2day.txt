JSP 태그의 개념 이해

-Servlet은 java언어를 이용하여 문서를 작성하고
출력객체(PrintWriter)을 이용하여 html 코드를 삽입합니다.
-jsp는 서블릿과 반대로 html코드에 java언어를 삽입하여 동적 문서
를 만들 수 있습니다.
-html코드 안에 java코드를 삽입하기 위해서는 jsp태그를 이용해야 하며
이러한 태그를 학습해야 합니다.
-----------------------------------------------------------
*List
 	-순차적 객체를 저장하는 자료구조
	-중복 객체 저장 가능, 저장 순서가 보장됨
	-index로 관리
	-ArrayList, LinkdList

List<String> list = new Arraylist<>();
list.add(); -추가
list.size(); -개수
list.get(index);
list.remove(객체)or(index);
list.indexOf(객체)
list.contains(객체); true false
list.clear(); 
list.set(index, 객체); 
Collectons.sort(리스트); 오름차 정렬
		(리스트,reverseOrder()); 내림차정렬
-------------------------------------------------------------

지시자 (Directive)

1.page: JSP페이지에 대한 정보를 지정한다. JSP가 생성하는 문서의
타입, 출력 버퍼의 크기, 에러 페이지 등 페이지에서 필요로 하는 정보를 설정합니다.

- 페이지 디렉티브에 선언 될 수 있는 속성들
a.language - 언어를 지정합니다. java만 지정할 수 있습니다.
b.import - 패키지를 import할 때 사용합니다.
c.errorPage - 설정 된 페이지에서 에러가 발생했을 시에 미리 만들어 둔
에러 페이지를 호출합니다
d.contentType - text/html이라고 쓰면 결과가 HTML문서로 만들어집니다.
e.pageEncoding - 출력 문자 인코딩입니다. 기본은 ISO-8859-1이며
한글을 사용하려면 utf-8로 지정합니다.
f.trimDirectWhitespaces - 디렉티브나 스크립트릿 코드로 인해서 만들어진
공백 문자를 제거하는 기능.

* JSP 내장 객체

-개발자가 JSP파일 내에 객체를 생성하지 않고 바로 사용할 수 있는 객체가
내장 객체입니다
-JSP에서 제공하는 내장객체는 JSP 컨테이너에 의해 서블릿으로 변환될
때 자동으로 객체가 생성됩니다.

*JSP 내장 객체 종류

1.request 	javax.servlet.http.HttpServletRequest
>클라이언트 -> 서버 요청
> 아이디 비번 -> 요청
> 회원가입 -> 요청 >서버측에서 회원정보를 받을 때 쓰임 >어디에 담겨 넘어가냐 request통해
	>로그인 시켜주지말지 >if문으로..
2.response 	javax.servlet.http.HttpServletResponse
>
3.out		javax.servlet.jsp.JspWriter
4.session 	javax.servlet.http.HttpSession
5.application	javax.servlet.ServletContext

* request 객체의 이해
- 웹 브라우저를 통해 서버에 어떤 정보를 요청하는 것을 request라고 합니다.
- 이러한 요청 정보가 담기고 관리되는 곳이 request객체입니다.

- request 객체가 제공하는 기능
1. 클라이언트(웹 브라우저)와 관련된 정보 읽기 기능.
2. 서버와 관련된 정보 읽기 기능
3. 클라이언트가 전송한 요청 파라미터 읽기 기능
>파라미터:클라이언트측에서 서버로 넘기는 기능 
>넘기는 정보를 서버측에서 읽음
4. 클라이언트가 전송한 쿠키 읽기 기능.

-request 객체 주요 메서드
1. getContextPath():String - 웹 어플리케이션의 컨텍스트 루트의 경로를 얻습니다.
2. getMethod():String - 웹 브라우저가 정보를 전송할 때 사용한 요청 방식을 구합니다(get,post)
3. getServerName():String - 연결할 때 사용한 서버 이름을 구합니다.
4. getServerPort():int - 서버가 실행중인 포트 번호를 구합니다.
5. getRequestURL():String - 요청 URL을 얻습니다.
6. getRequestURI():String - 요청 URI을 얻습니다.
7. getRemoteAddr():String - 웹 서버에 연결한 클라이언트의 IP주소를 구합니다.
8. getProtocol():String - 해당 프로토콜을 얻습니다.
9. getParameter(String name):String:이름이 name인 피라미터 값을 구합니다. 존재하지 
않을 경우 null을 반환합니다. 
10. getParameterValues(String name):String[]: 이름이 name인 모든 파라미터 값들을
배열로 구합니다. 존재하지 않을 경우 null을 반환합니다.
11. getParameterNames(): java.util.Enumeration




